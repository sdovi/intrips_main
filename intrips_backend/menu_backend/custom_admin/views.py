from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.views import View
from django.utils.timezone import now
from django.contrib import messages
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth import login
from django.contrib.auth.models import User
from rest_framework import viewsets, generics, status
from rest_framework.response import Response
from rest_framework.decorators import api_view
import requests
import json
import calendar
from django.http import HttpResponse
from datetime import datetime

from .forms import ShopForm
from .models import Order, Booking, Employee, Status, Task
from .serializers import OrderSerializer, BookingSerializer, TaskSerializer
from .forms import EmployeeForm, BookingForm, TaskForm, AdminRegistrationForm, ConfirmOrderForm
from .statistics_service import ServiceStatistics
from django.views.decorators.csrf import csrf_exempt
from .serializers import EmployeeSerializer
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status
from .models import AgreementCategory, InfoCard
from .serializers import AgreementCategorySerializer, InfoCardSerializer
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.models import User
from django.contrib.auth import login as auth_login
import json


from django.shortcuts import render, redirect
from .forms import CreateShopForm
from django.shortcuts import render, get_object_or_404
from main.models import UserSettings

def custom_admin_dashboard(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    return render(request, 'custom_admin/dashboard.html', {'shop': shop})





@login_required(login_url="login")
def create_shop(request):
    """–°–æ–∑–¥–∞—ë—Ç –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if hasattr(request.user, 'usersettings'):
        return redirect("dashboard")  # –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω–∫—É

    if request.method == "POST":
        name = request.POST.get("name", "").strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        website_url = request.POST.get("website_url", "").strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–ª—è
        if not name or not website_url:
            return render(request, "custom_admin/create_shop.html", {"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!"})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ URL
        if UserSettings.objects.filter(website_url=website_url).exists():
            return render(request, "custom_admin/create_shop.html", {"error": "–≠—Ç–æ—Ç URL —É–∂–µ –∑–∞–Ω—è—Ç!"})

        # –°–æ–∑–¥–∞—ë–º –º–∞–≥–∞–∑–∏–Ω
        shop = UserSettings.objects.create(user=request.user, name=name, website_url=website_url)

        return redirect("dashboard")

    return render(request, "custom_admin/create_shop.html")



# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
@api_view(['GET', 'POST'])
def agreement_categories(request, shop_url=None):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ shop_url
    if shop_url:
        try:
            shop = UserSettings.objects.get(website_url=shop_url)
            categories = AgreementCategory.objects.filter(shop=shop)
        except UserSettings.DoesNotExist:
            return Response({'error': '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)
    else:
        categories = AgreementCategory.objects.all()

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    serializer = AgreementCategorySerializer(categories, many=True)
    return Response(serializer.data)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@api_view(['GET', 'PUT', 'DELETE'])
def agreement_category_detail(request, category_id, shop_url=None):
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω shop_url, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
        if shop_url:
            shop = UserSettings.objects.get(website_url=shop_url)
            category = AgreementCategory.objects.get(id=category_id, shop=shop)
        else:
            category = AgreementCategory.objects.get(id=category_id)

    except (AgreementCategory.DoesNotExist, UserSettings.DoesNotExist):
        return Response({'error': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}, status=status.HTTP_404_NOT_FOUND)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if request.method == 'GET':
        serializer = AgreementCategorySerializer(category)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = AgreementCategorySerializer(category, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        category.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
@api_view(['GET', 'POST'])
def info_cards(request, shop_url=None):
    if shop_url:
        try:
            shop = UserSettings.objects.get(website_url=shop_url)
            cards = InfoCard.objects.filter(shop=shop)
        except UserSettings.DoesNotExist:
            return Response({'error': '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)
    else:
        cards = InfoCard.objects.all()

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    serializer = InfoCardSerializer(cards, many=True)
    return Response(serializer.data)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@api_view(['GET', 'PUT', 'DELETE'])
def info_card_detail(request, card_id, shop_url=None):
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω shop_url, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
        if shop_url:
            shop = UserSettings.objects.get(website_url=shop_url)
            card = InfoCard.objects.get(id=card_id, shop=shop)
        else:
            card = InfoCard.objects.get(id=card_id)

    except (InfoCard.DoesNotExist, UserSettings.DoesNotExist):
        return Response({'error': '–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}, status=status.HTTP_404_NOT_FOUND)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    if request.method == 'GET':
        serializer = InfoCardSerializer(card)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = InfoCardSerializer(card, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        card.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class EmployeeListView(generics.ListAPIView):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer
from django.shortcuts import render, get_object_or_404
from custom_admin.models import Booking, UserSettings, Status
import json
from datetime import datetime

def money_stats_view(request, shop_url):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–Ω—å–≥–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –≤—ã–¥–∞–µ–º 404, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", –Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º None
    completed_status = Status.objects.filter(name="–í—ã–ø–æ–ª–Ω–µ–Ω–æ").first()

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if completed_status:
        bookings_done = Booking.objects.filter(shop=shop, status=completed_status)
    else:
        bookings_done = []

    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    months_list_ru = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç",
        4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
        7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å",
        10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É
    selected_month = request.GET.get("month")
    if selected_month:
        bookings_done = [
            booking for booking in bookings_done
            if months_list_ru.get(booking.date.month) == selected_month
        ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å–ª—É–≥–∞–º
    stats = {}
    for booking in bookings_done:
        service_name = booking.service_name
        total_price = float(booking.total_price) if booking.total_price else 0
        stats[service_name] = stats.get(service_name, 0) + total_price

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –≤ ‚ÇΩ
    stats_with_currency = {k: f"{v:.2f} ‚ÇΩ" for k, v in stats.items()}

    context = {
        
        "shop": shop,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –º–∞–≥–∞–∑–∏–Ω–∞
        "filtered_data": bookings_done,
        "stats_json": json.dumps(stats_with_currency),  # –î–∞–Ω–Ω—ã–µ –¥–ª—è Chart.js
        "months": months_list_ru.values(),  # –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
        "selected_month": selected_month
    }

    return render(request, "custom_admin/money_stats.html", context)





def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        return response.json()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def confirm_order(request, shop_url, order_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–æ–≤ + –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    order = get_object_or_404(Order, id=order_id, shop=shop)

    if request.method == "POST":
        employee_id = request.POST.get("employee")
        employee = get_object_or_404(Employee, id=employee_id)

        service_name = order.items[0]["name"] if order.items else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
        in_work_status = Status.objects.get_or_create(name="–í —Ä–∞–±–æ—Ç–µ")[0]

        Booking.objects.create(
            service_name=service_name,
            room_number=order.room_number,
            guest_count=1,
            date=order.date,
            start_time=order.time,
            comment=order.comments,
            status=in_work_status,
            items=order.items,
            total_price=order.total_price,
            employee=employee,
            shop=shop,
        )

        order.status = "in_work"
        order.employee = employee
        order.save()

        message_text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</b>\n"
            f"üè® –ö–æ–º–Ω–∞—Ç–∞: {order.room_number}\n"
            f"üõí –¢–æ–≤–∞—Ä—ã:\n"
        )

        for item in order.items:
            message_text += f"  - {item['name']} (x{item['quantity']}) - {item['price']} ‚ÇΩ\n"

        message_text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
        message_text += f"üë∑ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {employee.full_name}"

        if employee.user_id_tg:
            send_telegram_message(employee.user_id_tg, message_text)
            messages.success(request, f"–ó–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {employee.full_name}.")
        else:
            messages.error(request, f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name} –Ω–µ—Ç Telegram ID!")

        return redirect(request.META.get("HTTP_REFERER", "/"))

    return redirect("/")








# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
def is_superuser(user):
    return user.is_authenticated and user.is_superuser

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@login_required(login_url="login")
@user_passes_test(is_superuser, login_url="dashboard")
def user_list(request):
    users = User.objects.filter(is_superuser=False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    return render(request, "custom_admin/user_list.html", {"users": users})

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (AJAX)
@login_required(login_url="login")
@user_passes_test(is_superuser, login_url="dashboard")
def delete_user(request, user_id):
    user = get_object_or_404(User, id=user_id)
    user.delete()
    return JsonResponse({"success": True})
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
def is_superuser(user):
    return user.is_authenticated and user.is_superuser


@login_required(login_url="login")
def edit_shop(request, shop_url):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ URL"""
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É
    if shop.user != request.user:
        return redirect("dashboard")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞

    if request.method == "POST":
        form = ShopForm(request.POST, instance=shop)
        if form.is_valid():
            form.save()
            return redirect("dashboard")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    else:
        form = ShopForm(instance=shop)

    return render(request, "custom_admin/edit_shop.html", {"form": form, "shop": shop})





@login_required(login_url="login")
def get_new_orders_count(request):
    if hasattr(request.user, 'usersettings'):
        shop = request.user.usersettings
        new_orders_count = Order.objects.filter(status="new", shop__website_url=shop.website_url).count()
        return JsonResponse({"new_orders_count": new_orders_count})
    return JsonResponse({"new_orders_count": 0})

@login_required(login_url="login")
def dashboard(request):
    if hasattr(request.user, "usersettings"):
        shop = request.user.usersettings
        new_orders_count = Order.objects.filter(status="new", shop__website_url=shop.website_url).count()

        return render(request, "custom_admin/base.html", {
            "shop": shop,
            "new_orders_count": new_orders_count,
        })
    return redirect("create_shop")




# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@login_required(login_url="login")
@user_passes_test(is_superuser, login_url="dashboard")  
def register_admin(request):
    if request.method == "POST":
        form = AdminRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.set_password(form.cleaned_data["password"])
            user.is_staff = True  # –î–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user.save()
            return redirect("user_list")
    else:
        form = AdminRegistrationForm()

    return render(request, "custom_admin/register.html", {"form": form})





def purchase_stats_view(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)  # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    service_statistics = ServiceStatistics(shop)  # –ü–µ—Ä–µ–¥–∞—ë–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω
    filtered_data = service_statistics.filter_data()  # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    stats = service_statistics.get_statistics()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    context = {
        "bookings": filtered_data,
        "stats_json": json.dumps(stats),  # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ JavaScript
        "shop": shop
    }
    return render(request, 'custom_admin/purchase_stats.html', context)

@api_view(['GET', 'POST'])
def bookings(request, shop_url):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    
    if request.method == 'GET':
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
        bookings = Booking.objects.filter(shop=shop)
        serializer = BookingSerializer(bookings, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        data = request.data.copy()
        data["shop"] = shop.id  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
        serializer = BookingSerializer(data=data)
        
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–û–°–¢–û–†–û–ñ–ù–û, –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!)
TELEGRAM_BOT_TOKEN = "7222921497:AAHdC-9gxrjaTHlItXjkZafA_7ldGVuPwTE"

def send_message(request, shop_url, employee_id):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    employee = get_object_or_404(Employee, id=employee_id)

    if request.method == "POST":
        message_text = request.POST.get("message", "").strip()
        if message_text:
            return redirect('send_message_process', shop_url=shop_url, employee_id=employee.id)

    return render(request, "custom_admin/send_message.html", {
        "employee": employee,
        "shop": shop
    })


def send_message_process(request, shop_url, employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    employee = get_object_or_404(Employee, id=employee_id)

    if request.method == "POST":
        message_text = request.POST.get("message", "").strip()

        if not message_text:
            messages.error(request, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return redirect('send_message', shop_url=shop.website_url, employee_id=employee.id)

        if not employee.user_id_tg:
            messages.error(request, "–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç Telegram ID!")
            return redirect('send_message', shop_url=shop.website_url, employee_id=employee.id)

        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        data = {
            "chat_id": employee.user_id_tg,
            "text": message_text,
            "parse_mode": "HTML"
        }

        try:
            response = requests.post(url, json=data)
            response_data = response.json()

            if response.status_code == 200 and response_data.get("ok"):
                messages.success(request, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                messages.error(request, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        except requests.RequestException as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    return redirect('send_message', shop_url=shop.website_url, employee_id=employee.id)


@api_view(['GET'])
def task_list_api(request):
    tasks = Task.objects.all()
    serializer = TaskSerializer(tasks, many=True)
    return Response(serializer.data)

class TaskCalendarView(View):
    def get(self, request, shop_url):
        shop = get_object_or_404(UserSettings, website_url=shop_url)
        return render(request, "custom_admin/order_calendar.html", {"shop": shop})


def task_events(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    bookings = Booking.objects.filter(employee__shop=shop)
    booking_events = [
        {
            "title": booking.service_name,
            "start": f"{booking.date}T{booking.start_time}",
            "end": f"{booking.date}T{booking.end_time}",
            "color": "#36A2EB"  # –°–∏–Ω–∏–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        }
        for booking in bookings
    ]

    # –ó–∞–¥–∞—á–∏
    tasks = Task.objects.filter(shop=shop)
    task_events = [
        {
            "title": task.description,
            "start": f"{task.date}T{task.time}",
            "end": f"{task.date}T{task.end_time}" if task.end_time else f"{task.date}T{task.time}",
            "color": "#FF6384"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–∞–¥–∞—á
        }
        for task in tasks
    ]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏
    events = booking_events + task_events

    return JsonResponse(events, safe=False)




# üìå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á + –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
def task_list(request, shop_url):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
    tasks = Task.objects.filter(shop=shop)  # –î–æ–±–∞–≤—å —Å–≤—è–∑—å Task ‚Üí UserSettings

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –∏ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã
    date_filter = request.GET.get('date', None)
    room_filter = request.GET.get('room', None)
    if date_filter:
        tasks = tasks.filter(date=date_filter)
    if room_filter:
        tasks = tasks.filter(room=room_filter)

    return render(request, 'custom_admin/apps.html', {'tasks': tasks, 'shop': shop})



def add_task(request, shop_url):  # –ü–æ–ª—É—á–∞–µ–º `shop_url` –∏–∑ URL
    shop = get_object_or_404(UserSettings, website_url=shop_url)  # –ù–∞—Ö–æ–¥–∏–º –º–∞–≥–∞–∑–∏–Ω

    if request.method == "POST":
        form = TaskForm(request.POST)
        if form.is_valid():
            task = form.save(commit=False)
            task.shop = shop  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∫ –º–∞–≥–∞–∑–∏–Ω—É
            task.save()
            return redirect('task_list', shop_url=shop_url)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

    else:
        form = TaskForm()

    employees = Employee.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return render(request, 'custom_admin/task_form.html', {'form': form, 'employees': employees, 'shop': shop})

def edit_task(request, shop_url, task_id):
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    task = get_object_or_404(Task, id=task_id, shop=shop)

    if request.method == "POST":
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            return redirect('task_list', shop_url=shop_url)  # –†–µ–¥–∏—Ä–µ–∫—Ç —Å shop_url

    else:
        form = TaskForm(instance=task)

    employees = Employee.objects.all()
    return render(request, 'custom_admin/task_form.html', {
        'form': form,
        'employees': employees,
        'shop': shop,
        'task': task
    })




# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    shop_url = request.GET.get("shop_url")  # –ó–∞–±–∏—Ä–∞–µ–º shop_url –∏–∑ URL

    if request.method == "GET":
        task.delete()
        return redirect("task_list", shop_url)  # –ü–µ—Ä–µ–¥–∞–µ–º shop_url –ø—Ä–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ

    return render(request, 'custom_admin/task_confirm_delete.html', {'task': task})




@csrf_exempt  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å CSRF-—Ç–æ–∫–µ–Ω –≤ —à–∞–±–ª–æ–Ω–µ, —ç—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
def update_booking_status(request, shop_url, booking_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    if request.method == "POST":
        try:
            data = json.loads(request.body)  # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
            status_id = data.get("status_id")

            # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ `website_url`
            shop = get_object_or_404(UserSettings, website_url=shop_url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
            booking = get_object_or_404(Booking, id=booking_id, employee__shop=shop)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            status = get_object_or_404(Status, id=status_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            booking.status = status
            booking.save()

            return JsonResponse({"success": True, "status": status.name})
        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)})
    
    return JsonResponse({"success": False, "error": "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å POST."})

import requests  # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ API

def booking_create(request, shop_url):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –º–∞–≥–∞–∑–∏–Ω—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≤ Telegram"""

    shop = get_object_or_404(UserSettings, website_url=shop_url)  # –ù–∞—Ö–æ–¥–∏–º –º–∞–≥–∞–∑–∏–Ω
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å try-except –Ω–∞ –æ—à–∏–±–∫–∏)
    try:
        services = requests.get("http://127.0.0.1:8000/api/categories/").json()
    except requests.exceptions.RequestException:
        services = []

    employees = Employee.objects.filter(shop=shop)  # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    statuses = Status.objects.all()

    if request.method == 'POST':
        form = BookingForm(request.POST)
        if form.is_valid():
            booking = form.save(commit=False)
            booking.shop = shop  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–∞–≥–∞–∑–∏–Ω—É
            booking.status = Status.objects.get(id=request.POST.get("status"))
            booking.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            employee_id = request.POST.get("employee")
            if employee_id:
                employee = get_object_or_404(Employee, id=employee_id)
                if employee.user_id_tg:
                    message_text = (
                        f"üîî <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
                        f"üè∑ –£—Å–ª—É–≥–∞: {booking.service_name}\n"
                        f"üìÖ –î–∞—Ç–∞: {booking.date}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {booking.start_time} - {booking.end_time or '--:--'}\n"
                        f"üö™ –ö–æ–º–Ω–∞—Ç–∞: {booking.room_number}\n"
                        f"üë• –ì–æ—Å—Ç–µ–π: {booking.guest_count}\n"
                        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking.comment or '–ù–µ—Ç'}"
                    )
                    send_telegram_message(employee.user_id_tg, message_text)
                else:
                    messages.warning(request, "–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç Telegram ID, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

            messages.success(request, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            return redirect('bookings_list', shop_url=shop_url)  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        else:
            print("–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:", form.errors)

    else:
        form = BookingForm()

    return render(request, 'custom_admin/booking_form.html', {
        'form': form,
        'services': services,
        'employees': employees,
        'statuses': statuses,
        'shop': shop
    })


def bookings_list(request, shop_url):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."""
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    in_progress_status = Status.objects.get(name="–í —Ä–∞–±–æ—Ç–µ")
    bookings = Booking.objects.filter(status=in_progress_status, shop=shop)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É

    statuses = Status.objects.all()
    
    return render(request, "custom_admin/bookings.html", {
        "bookings": bookings,
        "statuses": statuses,
        "shop": shop
    })



def archive_list(request, shop_url):
    """–ê—Ä—Ö–∏–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    # 2Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
    archive_statuses = Status.objects.filter(name__in=["–û—Ç–º–µ–Ω–µ–Ω", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"])
    archived_bookings = Booking.objects.filter(status__in=archive_statuses, employee__shop=shop)

    # 3Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å—ã (–¥–ª—è —Å–º–µ–Ω—ã)
    statuses = Status.objects.all()

    return render(request, 'custom_admin/archive.html', {
        'bookings': archived_bookings,
        'statuses': statuses,
        'shop': shop
    })

def employees(request):
    employees = Employee.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return render(request, "custom_admin/employees.html", {"employees": employees})  





def employees_list(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
    employees = Employee.objects.filter(shop=shop)  # –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    
    return render(request, 'custom_admin/employees.html', {'employees': employees, 'shop': shop})


def employee_create(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)

    if request.method == 'POST':
        form = EmployeeForm(request.POST)
        if form.is_valid():
            employee = form.save(commit=False)
            employee.shop = shop  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É
            employee.save()
            return redirect('employees', shop_url=shop_url)
    else:
        form = EmployeeForm()

    return render(request, 'custom_admin/employee_form.html', {'form': form, 'shop': shop})


def employee_edit(request, shop_url, pk):
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    employee = get_object_or_404(Employee, pk=pk, shop=shop)  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É

    if request.method == 'POST':
        form = EmployeeForm(request.POST, instance=employee)
        if form.is_valid():
            form.save()
            return redirect('employees_list', shop_url=shop_url)
    else:
        form = EmployeeForm(instance=employee)

    return render(request, 'custom_admin/employee_form.html', {'form': form, 'shop': shop})


def employee_delete(request, shop_url, pk):
    shop = get_object_or_404(UserSettings, website_url=shop_url)
    employee = get_object_or_404(Employee, pk=pk, shop=shop)  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞

    if request.method == 'POST':
        employee.delete()
        return redirect('employees_list', shop_url=shop_url)

    return render(request, 'custom_admin/employee_confirm_delete.html', {'employee': employee, 'shop': shop})

class OrderListCreateView(generics.ListCreateAPIView):
    serializer_class = OrderSerializer

    def get_queryset(self):
        website_url = self.kwargs.get("shop_url")  # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        shop = get_object_or_404(UserSettings, website_url=website_url)  # –ò—â–µ–º –º–∞–≥–∞–∑–∏–Ω
        return Order.objects.filter(shop=shop).order_by("-created_at")

    def perform_create(self, serializer):
        website_url = self.kwargs.get("shop_url")  # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        shop = get_object_or_404(UserSettings, website_url=website_url)  # –ò—â–µ–º –º–∞–≥–∞–∑–∏–Ω
        serializer.save(shop=shop)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –º–∞–≥–∞–∑–∏–Ω—É





def chat_guest(request):
    return render(request, "custom_admin/chat_guest.html")




def apps(request):
    return render(request, "custom_admin/apps.html")




def services(request):
    return render(request, "custom_admin/services.html")






def order_calendar(request):
    return render(request, "custom_admin/order_calendar.html")

def get_tasks(request):
    """API –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    tasks = Task.objects.all()
    events = [
        {
            "title": task.description,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            "start": f"{task.date}T{task.time}",  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ
            "color": "blue"  # –¶–≤–µ—Ç –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ
        }
        for task in tasks
    ]
    return JsonResponse(events, safe=False)


def employees(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)  # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ URL
    employees = Employee.objects.filter(shop=shop)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    return render(request, "custom_admin/employees.html", {
        "employees": employees,
        "shop": shop
    })



def purchase_stats(request):
    return render(request, "custom_admin/purchase_stats.html")


def orders(request, shop_url):
    shop = get_object_or_404(UserSettings, website_url=shop_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
    orders = Order.objects.filter(shop=shop).order_by("-status", "-created_at")  
    employees = Employee.objects.filter(shop=shop)
    new_orders_count = orders.filter(status="new").count()  

    return render(request, "custom_admin/orders.html", {
        "orders": orders,
        "employees": employees,
        "new_orders_count": new_orders_count,
        "shop": shop
    })
