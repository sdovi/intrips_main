from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.views import View
from django.utils.timezone import now
from django.contrib import messages
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth import login
from django.contrib.auth.models import User
from rest_framework import viewsets, generics, status
from rest_framework.response import Response
from rest_framework.decorators import api_view
import requests
import json
import calendar
from datetime import datetime

from .models import Order, Booking, Employee, Status, Task
from .serializers import OrderSerializer, BookingSerializer, TaskSerializer
from .forms import EmployeeForm, BookingForm, TaskForm, AdminRegistrationForm, ConfirmOrderForm
from .statistics_service import ServiceStatistics
from django.views.decorators.csrf import csrf_exempt
from .serializers import EmployeeSerializer
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status
from .models import AgreementCategory, InfoCard
from .serializers import AgreementCategorySerializer, InfoCardSerializer

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
@api_view(['GET', 'POST'])
def agreement_categories(request):
    if request.method == 'GET':
        categories = AgreementCategory.objects.all()
        serializer = AgreementCategorySerializer(categories, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = AgreementCategorySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@api_view(['GET', 'PUT', 'DELETE'])
def agreement_category_detail(request, category_id):
    try:
        category = AgreementCategory.objects.get(id=category_id)
    except AgreementCategory.DoesNotExist:
        return Response({'error': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = AgreementCategorySerializer(category)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = AgreementCategorySerializer(category, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        category.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
@api_view(['GET', 'POST'])
def info_cards(request):
    if request.method == 'GET':
        cards = InfoCard.objects.all()
        serializer = InfoCardSerializer(cards, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = InfoCardSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@api_view(['GET', 'PUT', 'DELETE'])
def info_card_detail(request, card_id):
    try:
        card = InfoCard.objects.get(id=card_id)
    except InfoCard.DoesNotExist:
        return Response({'error': '–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = InfoCardSerializer(card)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = InfoCardSerializer(card, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        card.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

class EmployeeListView(generics.ListAPIView):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer

API_URL = "https://intrips.site/api/bookings/"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL API
def money_stats_view(request):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    selected_month = request.GET.get("month")

    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    months_list_ru = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç",
        4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
        7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å",
        10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    response = requests.get(API_URL)
    if response.status_code != 200:
        return JsonResponse({"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"}, status=500)

    data = response.json()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å = 2)
    filtered_data = [entry for entry in data if entry["status"] == 2]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
    if selected_month:
        filtered_data = [
            entry for entry in filtered_data
            if months_list_ru.get(datetime.strptime(entry["date"], "%Y-%m-%d").month) == selected_month
        ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å–ª—É–≥–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º ‚ÇΩ
    stats = {}
    for entry in filtered_data:
        service_name = entry["service_name"]
        total_price = float(entry["total_price"])
        stats[service_name] = stats.get(service_name, 0) + total_price

    # –î–æ–±–∞–≤–ª—è–µ–º ‚ÇΩ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –¥–ª—è Chart.js
    stats_with_currency = {k: f"{v:.2f} ‚ÇΩ" for k, v in stats.items()}

    context = {
        "filtered_data": filtered_data,
        "stats_json": json.dumps(stats_with_currency),  # –î–∞–Ω–Ω—ã–µ –¥–ª—è Chart.js
        "months": months_list_ru.values(),  # –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã
        "selected_month": selected_month
    }
    
    return render(request, "custom_admin/money_stats.html", context)



def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        return response.json()
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def confirm_order(request, order_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    order = get_object_or_404(Order, id=order_id)

    if request.method == "POST":
        employee_id = request.POST.get("employee")  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Ñ–æ—Ä–º—ã
        employee = get_object_or_404(Employee, id=employee_id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        service_name = order.items[0]['name'] if order.items else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
        in_work_status = Status.objects.get_or_create(name="–í —Ä–∞–±–æ—Ç–µ")[0]

        # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        Booking.objects.create(
            service_name=service_name,
            room_number=order.room_number,
            guest_count=1,
            date=order.date,
            start_time=order.time,
            comment=order.comments,
            status=in_work_status,
            items=order.items,
            total_price=order.total_price,
            employee=employee
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = "in_work"
        order.save()

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message_text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</b>\n"
            f"üè® –ö–æ–º–Ω–∞—Ç–∞: {order.room_number}\n"
            f"üõí –¢–æ–≤–∞—Ä—ã:\n"
        )
        for item in order.items:
            message_text += f"  - {item['name']} (x{item['quantity']}) - {item['price']} ‚ÇΩ\n"

        message_text += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
        message_text += f"üë∑ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {employee.full_name}"

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—Å—Ç—å user_id_tg)
        if employee.user_id_tg:
            send_telegram_message(employee.user_id_tg, message_text)
            messages.success(request, f"–ó–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {employee.full_name}.")
        else:
            messages.error(request, f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.full_name} –Ω–µ—Ç Telegram ID!")

        return redirect(request.META.get("HTTP_REFERER", "/"))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    return redirect("/")  # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª GET-–∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é





# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
def is_superuser(user):
    return user.is_authenticated and user.is_superuser

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@login_required(login_url="login")
@user_passes_test(is_superuser, login_url="dashboard")
def user_list(request):
    users = User.objects.filter(is_superuser=False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    return render(request, "custom_admin/user_list.html", {"users": users})

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (AJAX)
@login_required(login_url="login")
@user_passes_test(is_superuser, login_url="dashboard")
def delete_user(request, user_id):
    user = get_object_or_404(User, id=user_id)
    user.delete()
    return JsonResponse({"success": True})
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
def is_superuser(user):
    return user.is_authenticated and user.is_superuser

# –í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@login_required(login_url="login")
def dashboard(request):
    new_orders_count = Order.objects.filter(status="new").count()
    return render(request, "custom_admin/base.html", {"new_orders_count": new_orders_count})

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@login_required(login_url="login")
@user_passes_test(is_superuser, login_url="dashboard")  
def register_admin(request):
    if request.method == "POST":
        form = AdminRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.set_password(form.cleaned_data["password"])
            user.is_staff = True  # –î–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user.save()
            return redirect("dashboard")
    else:
        form = AdminRegistrationForm()

    return render(request, "custom_admin/register.html", {"form": form})






def purchase_stats_view(request):
    service_statistics = ServiceStatistics()
    filtered_data = service_statistics.filter_data()
    stats = service_statistics.get_statistics()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ JavaScript
    context = {
        "bookings": filtered_data,
        "stats_json": json.dumps(stats)  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Chart.js
    }
    return render(request, 'custom_admin/purchase_stats.html', context)


@api_view(['GET', 'POST'])
def bookings(request):
    if request.method == 'GET':
        bookings = Booking.objects.all()
        serializer = BookingSerializer(bookings, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = BookingSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–û–°–¢–û–†–û–ñ–ù–û, –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!)
TELEGRAM_BOT_TOKEN = "7222921497:AAHdC-9gxrjaTHlItXjkZafA_7ldGVuPwTE"

def send_message(request, employee_id):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    employee = get_object_or_404(Employee, id=employee_id)

    if request.method == "POST":
        message_text = request.POST.get("message", "").strip()
        if message_text:
            return redirect('send_message_process', employee_id=employee.id)

    return render(request, "custom_admin/send_message.html", {"employee": employee})


def send_message_process(request, employee_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    employee = get_object_or_404(Employee, id=employee_id)

    if request.method == "POST":
        message_text = request.POST.get("message", "").strip()
        
        if not message_text:
            messages.error(request, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return redirect('send_message', employee_id=employee.id)

        if not employee.user_id_tg:
            messages.error(request, "–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç Telegram ID!")
            return redirect('send_message', employee_id=employee.id)

        # Telegram API URL
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": employee.user_id_tg,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            "text": message_text,
            "parse_mode": "HTML"  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É
        }

        try:
            response = requests.post(url, json=data)
            response_data = response.json()

            if response.status_code == 200 and response_data.get("ok"):
                messages.success(request, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                messages.error(request, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        except requests.RequestException as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    return redirect('send_message', employee_id=employee.id)

@api_view(['GET'])
def task_list_api(request):
    tasks = Task.objects.all()
    serializer = TaskSerializer(tasks, many=True)
    return Response(serializer.data)




class TaskCalendarView(View):
    def get(self, request):
        return render(request, "custom_admin/order_calendar.html")

def task_events(request):
    tasks = Task.objects.all()
    events = [
        {
            "title": task.description,
            "start": f"{task.date}T{task.time}",
            "color": "#"+task.employee.id.__str__()[:6]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞
        } for task in tasks
    ]
    return JsonResponse(events, safe=False)

# üìå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á + –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
def task_list(request):
    tasks = Task.objects.all()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    date_filter = request.GET.get('date', None)
    room_filter = request.GET.get('room', None)
    if date_filter:
        tasks = tasks.filter(date=date_filter)
    if room_filter:
        tasks = tasks.filter(room=room_filter)

    return render(request, 'custom_admin/apps.html', {'tasks': tasks})

# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def add_task(request):
    if request.method == "POST":
        form = TaskForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('task_list')
    else:
        form = TaskForm()
        
    employees = Employee.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return render(request, 'custom_admin/task_form.html', {'form': form, 'employees': employees})

def edit_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == "POST":
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            return redirect('task_list')
    else:
        form = TaskForm(instance=task)

    employees = Employee.objects.all()  # üëà –ü–µ—Ä–µ–¥–∞—ë–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return render(request, 'custom_admin/task_form.html', {'form': form, 'employees': employees})



# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def delete_task(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == "POST":
        task.delete()
        return redirect('task_list')
    return render(request, 'custom_admin/task_confirm_delete.html', {'task': task})



@csrf_exempt  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å CSRF-—Ç–æ–∫–µ–Ω –≤ —à–∞–±–ª–æ–Ω–µ, —ç—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
def update_booking_status(request, booking_id):
    if request.method == "POST":
        try:
            data = json.loads(request.body)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fetch()
            status_id = data.get("status_id")

            booking = get_object_or_404(Booking, id=booking_id)
            new_status = get_object_or_404(Status, id=status_id)

            booking.status = new_status
            booking.save()

            return JsonResponse({"success": True, "status": new_status.name})
        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)})
    
    return JsonResponse({"success": False, "error": "Invalid request"}, status=400)

def booking_create(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ API
    try:
        services = requests.get("https://intrips.site/api/categories/").json()  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π API
    except requests.exceptions.RequestException:
        services = []

    employees = Employee.objects.all()
    statuses = Status.objects.all()

    if request.method == 'POST':
        form = BookingForm(request.POST)
        if form.is_valid():
            booking = form.save(commit=False)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            booking.status = Status.objects.get(id=request.POST.get("status"))
            booking.save()  # –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            employee_id = request.POST.get("employee")
            if employee_id:
                employee = get_object_or_404(Employee, id=employee_id)

                if employee.user_id_tg:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"üîî <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</b>\n"
                        f"üè∑ –£—Å–ª—É–≥–∞: {booking.service_name}\n"
                        f"üìÖ –î–∞—Ç–∞: {booking.date}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {booking.start_time} - {booking.end_time}\n"
                        f"üö™ –ö–æ–º–Ω–∞—Ç–∞: {booking.room_number}\n"
                        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.guest_count}\n"
                        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking.comment or '–ù–µ—Ç'}"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                    send_telegram_message(employee.user_id_tg, message_text)
                else:
                    messages.warning(request, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç Telegram ID, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

            messages.success(request, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            return redirect('bookings_list')
        else:
            print("–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:", form.errors)

    else:
        form = BookingForm()

    return render(request, 'custom_admin/booking_form.html', {
        'form': form,
        'services': services,
        'employees': employees,
        'statuses': statuses,
    })

def bookings_list(request):
    in_progress_status = Status.objects.get(name="–í —Ä–∞–±–æ—Ç–µ")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"
    bookings = Booking.objects.filter(status=in_progress_status)  # –§–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    statuses = Status.objects.all()
    
    return render(request, 'custom_admin/bookings.html', {'bookings': bookings, 'statuses': statuses})


def archive_list(request):
    archive_statuses = Status.objects.filter(name__in=["–û—Ç–º–µ–Ω–µ–Ω", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"])
    archived_bookings = Booking.objects.filter(status__in=archive_statuses)
    statuses = Status.objects.all()  # ‚ö° –î–û–ë–ê–í–ò–õ `statuses`, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç!

    return render(request, 'custom_admin/archive.html', {'bookings': archived_bookings, 'statuses': statuses})

def employees(request):
    employees = Employee.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return render(request, "custom_admin/employees.html", {"employees": employees})  





def employees_list(request):
    employees = Employee.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    
    print("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:", employees)  # –í—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ Django
    return render(request, 'custom_admin/employees.html', {'employees': employees})

def employee_create(request):
    if request.method == 'POST':
        form = EmployeeForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('employees_list')
    else:
        form = EmployeeForm()
    return render(request, 'custom_admin/employee_form.html', {'form': form})

def employee_edit(request, pk):
    employee = get_object_or_404(Employee, pk=pk)
    if request.method == 'POST':
        form = EmployeeForm(request.POST, instance=employee)
        if form.is_valid():
            form.save()
            return redirect('employees_list')
    else:
        form = EmployeeForm(instance=employee)
    return render(request, 'custom_admin/employee_form.html', {'form': form})

def employee_delete(request, pk):
    employee = get_object_or_404(Employee, pk=pk)
    if request.method == 'POST':
        employee.delete()
        return redirect('employees_list')
    return render(request, 'custom_admin/employee_confirm_delete.html', {'employee': employee})







class OrderListCreateView(generics.ListCreateAPIView):
    queryset = Order.objects.all().order_by("-created_at")  # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ –Ω–∞—á–∞–ª–µ
    serializer_class = OrderSerializer


# def dashboard(request):
#     return render(request, "custom_admin/base.html")




def chat_guest(request):
    return render(request, "custom_admin/chat_guest.html")




def apps(request):
    return render(request, "custom_admin/apps.html")




def services(request):
    return render(request, "custom_admin/services.html")






def order_calendar(request):
    return render(request, "custom_admin/order_calendar.html")

def get_tasks(request):
    """API –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    tasks = Task.objects.all()
    events = [
        {
            "title": task.description,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            "start": f"{task.date}T{task.time}",  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ
            "color": "blue"  # –¶–≤–µ—Ç –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ
        }
        for task in tasks
    ]
    return JsonResponse(events, safe=False)


def employees(request):
    employees = Employee.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return render(request, "custom_admin/employees.html", {"employees": employees})  




def purchase_stats(request):
    return render(request, "custom_admin/purchase_stats.html")


def orders(request):
    orders = Order.objects.all().order_by("-status", "-created_at")
    employees = Employee.objects.all()
    new_orders_count = Order.objects.filter(status="new").count()  # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏
    return render(request, "custom_admin/orders.html", {
        "orders": orders, 
        "employees": employees, 
        "new_orders_count": new_orders_count  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —à–∞–±–ª–æ–Ω
    })